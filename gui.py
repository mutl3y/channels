#!/usr/bin/env python3
from PIL import Image, ImageDraw
from PySimpleGUI import Button, BUTTON_TYPE_READ_FORM, FILE_TYPES_ALL_FILES, theme_background_color, theme_button_color
import io
from base64 import b64encode

import PySimpleGUI
import time


def decorate(func, ):
    def wrapper(*args, **kwargs):
        print(f'******** {func} **********************')
        for a in args:
            print(f'******** func args {a}  *****************\n')
        return func(*args, **kwargs)

    return wrapper


debug = True


def log(*args, sleep: int = 0):
    if debug:
        for a in args:
            print(f'***** {a} *****')
    time.sleep(sleep)


# @decorate
# def decode(d: dict) -> (str, list, list):
#     # log(f'd: {d}')
#     log(f'Decoded: {d}')
#     headers = list()
#     if len(list(d.keys())) == 1:
#         keys = list(d.keys())
#         title = keys[0]
#         _data = d[title]
#         log(f'Decoded _data: {_data}')
#     else:
#         title = list(d.values())[0]
#         headers = list(d.keys())
#         log(f'Decoded headers: {headers}')
#         _data = list(list(d.values()))
#
#     # log(f'title is {title}')
#     # log(f'title: {title}')
#
#     # _data = d[title]
#     # log(f'_data == list {isinstance(_data, list)} ')
#
#     if isinstance(_data[0], list):
#         log('==============  LIST =================')
#
#     elif isinstance(_data[0], dict):
#         headers = list(_data[0].keys())
#         list_out = [list(li.values()) for li in _data]
#     elif isinstance(_data[0], str):
#         # log(f'_data[0] is string : {_data[0]}')
#         # log(f'data explode= {_data}')
#         # log(f' headers {headers}')
#         # headers = list(_data.keys())
#         title = str(_data[0])
#         list_out = _data
#     else:
#         log(f' =============== oops ============={type(_data[0])}====')
#         headers = 'oops'
#         # list_out = [li for li in _data]
#
#     log(f'title: {title}')
#     log(f'headers: {headers}')
#     log(f'list_out {list_out}')
#
#     return title, headers, list_out
#

# @decorate
# def pack(header: list, list_in: list) -> dict:
#     """ takes a list of headers and values and packs into a dictionary"""
#     # print(f'***** pack {header} : {list_in}')
#     # log(f'pack {header}')
#     # log(f'list_in {list_in}')
#     d = dict()
#     i = 0
#     for li in list_in:
#         log(f'pack {li}')
#         for o in li:
#
#             if isinstance(i, str):
#                 log(f'string {type(i)}  {i}')
#                 d[header[i]] = li
#             else:
#                 d[header[i]] = li
#                 log(f' {li}')
#         i += 1
#         # if isinstance(list_in[i], list):
#         #     log(f'got a list')
#         # else:
#         #     log(f'got a {type(list_in)}')
#     log(f'decode d {d}')
#     return d
#     #     for key in header:
#     #         log(f'if not isinstance(header, str): {key} = {[i] for i in list_in}')
#     #         d[key] = (list_in)
#     #         i += 1
#     # else:
#     #     print(f'***** else  {d}')
#     #     print({header[i]: val for list_object in list_in for val in list_object.items()})
#     # return d
#

# def dead():
#     """ delete me #todo """
#     # headers = list(a_dict.keys())
#     d = dict()
#     for i in a_dict.fromkeys():
#         print(i)
#         # data = a_dict.values()
#         # print(f'Header = {header}')
#         print(f'Data   = {i}')
#         # if isinstance(data, list):
#         #     # d[header] = dict(data)
#         #     print(dict(d))
#         #     print('list')
#
#     # data = [{item: item} for item in headers if not isinstance(item, list)]
#
#     return headers, d

def element_size(item, multiplier: int = 1) -> tuple:
    element_length = len(str(item))
    if element_length <= 1:
        element_length += 2
    else:
        element_length *= multiplier
    return element_length


# Class holding the button graphic info. At this time only the state is kept
class BtnInfo:
    def __init__(self, state=True):
        self.state = state  # Can have 3 states - True, False, None (disabled)


# on_image =
# b'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'
#
# off_image =
# b'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'
#
# off_image_disabled = b'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'
# on_image_disabled = b'iVBORw0KGgoAAAANSUhEUgAAAFoAAAAnCAYAAACPFF8dAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAVLSURBVGhD7Zu7TytHFMbHyxvsJeb9kjCiCihRpJAobaqblFGUJmXqKMofkyZpaKhS5HaJIgUpRZQmoqAhSgEUSBZgsAE/uJhX5ht80LmH8e56fdde7PuTPu0yj/XMt7Nnd2aXxPr6uuKMjIx84LruR47jJGtJbeeVplQqOaOjo+8MDAwk7u7uyrWsWIF2FYvFf3Rbt/HnQ+oDj0Ynk8kPl5eXf9Amf6L7pW5vb9X9/b3Jaye5XE719fWpubk51dPTY/bjijba+KbN3t7d3f324uLir1rWg9HpdPrFysrKy0KhMJTNZtX19XUtu/0sLi6qyclJlUqlcLWpRCJRy4knNzc3ShusKpXKq52dnS/z+fyvSE9sbGxMrq2t/Xd8fJw+PDw0hf1oRWdxNY2Pj6tMJqMmJiZUf3//Y3ocrjQJPOG+nJ2dYWSXt7a23tMRYt+Zn5//rlqteppMB5EHi5rZ2VmEtEeTAUzGJRo3yZOv7ydo94j293v8ndjW6JDxvh7RpoBEGtsKo9FofdNTq6urampqSvX29tZynhcIIUdHR//qUb3iDA4OZnDzs0Gm0khulQCMBs/VZIC2Dw8Pv6v71OvoO7lri3nUYb5tlToRp7Z9Deos37ZanYbVaA7vON/qCU1k6kQC94oMhxFk+FuCU9doPnptkPFRqBN5YjTvKO1LE3iZtwSjMwNiDGnYaD6aEa/1czieFdXQ0JB1wQfPw5C8Cii9Wwg9omHw2NiYmSLDaCz4YNoJ8ScHpGNBCGU4SIe6hVBGY+0BBmOiUy6XzQIKpptY9cOohrESjHg+y+u2ON+w0TAXpgGYfHl5aZYGq9WqMRsLLDDbNnXGyelWQsVoisUwl4OTQGvZPF5TOsxHyOlGQsdogNEroTQZGkqlktkiLnfq7M+LpnpsM4zS5EIVXvFUKhVzAmC2zH+OoA/1JGnYaByEwoN8PONhBXFbgngOw1GvnaNamhJWjdBwb2EmDAP0/EwvTV3XNQbiRNDJ4KBxuIGGQXayGXlhKx9WnFDDCjdBGEZhIJ1Om+dnmI2RXCwWayWfgrpXV1e1v4IhG10P2dEwCoKtnpQkVOgAGNX5fN7c5LCP+IvHOzxT85sk0uUoxt+oh7ygyI7Y5IetTlSSNBUoYSheg8E4mCYf9wDy5asyqlfvFZrE1pFGhd+0pYdRPbzKPTGaF6B9WVEeJGro95uRH7Y6jcqLuiOaKvIDyP2oFBRb3bDywlbeT5LAocPvQFEif5sUBFu9RuVHkDq+RvOK/ECIeW8y7nHZsJULIj9sdRpVEKxGU2W+lftRywtb+bDywlY+qCTGaLkuAagw39pGcBSjWoJJkFe+hJdtRn7Y6kBAznwdZPCVNg5V4gegfS4KI29KgB4VMWVHo7nZtjpcvG1hZTuulK0eID/RdpQDjn7+PcfMrh5UGciDRiVA69w03UfjMdVHw9EB5EUp/IaXbHXQdrwUQTsB2q5nwZc6/T6xubn5WyaT+Wxvb08VCgVTwAtbmIkCNHpmZkYtLCyY76P5iwQ6GXGE/MHMFzPlg4ODP/f39z91Tk9Pfzw/P1dLS0tqenra10h0shUC+JQYbTs5OXltfQRtjKvQdhhMyuVyP5k244t/PXJ+0aPmCywM4dLEohAuD1S0QUa0ApiMD9LxMTrCB1SvXe0GnuHegi1M1m3/I5vNvtBZd8Zo3fCkNvvnZDL5OV41Ic7EqTM48RjReOdo+3QhLmAAwmis4ejQ8bu+Ir/SaWYpk/9XViKVSn3tuu43ujMf67t8975JDYk29UrfAP/WA2NdawNJDzlK/Q9RjPZ1HEiBtwAAAABJRU5ErkJggg=='
#
# off_image2 = b''


# def button_image_generator(button_text: str, corner_radius: int = 0, button_type=BUTTON_TYPE_READ_FORM,
#                            target=(None, None),
#                            tooltip=None, file_types=FILE_TYPES_ALL_FILES, initial_folder=None, default_extension='',
#                            disabled=False, change_submits=False, enable_events=False,
#                            image_size=(None, None), image_subsample=None, border_width=None, size=(None, None),
#                            auto_size_button=None, button_color=None, disabled_button_color=None, highlight_colors=None,
#                            mouseover_colors=(None, None), use_ttk_buttons=None, font=None, bind_return_key=False,
#                            focus=False,
#                            pad=None, key=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True,
#                            metadata=None):
#     if None in size:
#         multi = 5
#         size = (((len(button_text) if size[0] is None else size[0]) * 5 + 20) * multi,
#                 20 * multi if size[1] is None else size[1])
#     if button_color is None:
#         button_color = theme_button_color()
#     print(f'button color {button_color}')
#     print(f'theme color {theme_button_color()}')
#     btn_img = Image.new('RGBA', size, (0, 0, 0, 0))
#     corner_radius = int(corner_radius / 2 * min(size))
#     poly_coords = (
#         (corner_radius, 0),
#         (size[0] - corner_radius, 0),
#         (size[0], corner_radius),
#         (size[0], size[1] - corner_radius),
#         (size[0] - corner_radius, size[1]),
#         (corner_radius, size[1]),
#         (0, size[1] - corner_radius),
#         (0, corner_radius),
#     )
#     pie_coords = [
#         [(size[0] - corner_radius * 2, size[1] - corner_radius * 2, size[0], size[1]),
#          [0, 90]],
#         [(0, size[1] - corner_radius * 2, corner_radius * 2, size[1]), [90, 180]],
#         [(0, 0, corner_radius * 2, corner_radius * 2), [180, 270]],
#         [(size[0] - corner_radius * 2, 0, size[0], corner_radius * 2), [270, 360]],
#     ]
#     brush = ImageDraw.Draw(btn_img)
#     brush.polygon(poly_coords, button_color[0])
#     for coord in pie_coords:
#         brush.pieslice(coord[0], coord[1][0], coord[1][1], button_color[1])
#     data = io.BytesIO()
#     btn_img.thumbnail((size[0] // 3, size[1] // 3), resample=Image.LANCZOS)
#     btn_img.save(data, format='png', quality=95)
#     return b64encode(data.getvalue())
#
#
# def RoundedButton(button_text=' ', corner_radius=0, button_type=BUTTON_TYPE_READ_FORM, target=(None, None),
#                   tooltip=None, file_types=FILE_TYPES_ALL_FILES, initial_folder=None, default_extension='',
#                   disabled=False, change_submits=False, enable_events=False,
#                   image_size=(None, None), image_subsample=None, border_width=None, size=(None, None),
#                   auto_size_button=None, button_color=None, disabled_button_color=None, highlight_colors=None,
#                   mouseover_colors=(None, None), use_ttk_buttons=None, font=None, bind_return_key=False, focus=False,
#                   pad=None, key=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True,
#                   metadata=None):
#     if None in size:
#         multi = 5
#         size = (((len(button_text) if size[0] is None else size[0]) * 5 + 20) * multi,
#                 20 * multi if size[1] is None else size[1])
#     if button_color is None:
#         button_color = theme_button_color()
#     btn_img = Image.new('RGBA', size, (0, 0, 0, 0))
#     corner_radius = int(corner_radius / 2 * min(size))
#     poly_coords = (
#         (corner_radius, 0),
#         (size[0] - corner_radius, 0),
#         (size[0], corner_radius),
#         (size[0], size[1] - corner_radius),
#         (size[0] - corner_radius, size[1]),
#         (corner_radius, size[1]),
#         (0, size[1] - corner_radius),
#         (0, corner_radius),
#     )
#     pie_coords = [
#         [(size[0] - corner_radius * 2, size[1] - corner_radius * 2, size[0], size[1]),
#          [0, 90]],
#         [(0, size[1] - corner_radius * 2, corner_radius * 2, size[1]), [90, 180]],
#         [(0, 0, corner_radius * 2, corner_radius * 2), [180, 270]],
#         [(size[0] - corner_radius * 2, 0, size[0], corner_radius * 2), [270, 360]],
#     ]
#     brush = ImageDraw.Draw(btn_img)
#     brush.polygon(poly_coords, button_color[1])
#     for coord in pie_coords:
#         brush.pieslice(coord[0], coord[1][0], coord[1][1], button_color[1])
#     data = io.BytesIO()
#     btn_img.thumbnail((size[0] // 3, size[1] // 3), resample=Image.LANCZOS)
#     btn_img.save(data, format='png', quality=95)
#     btn_img = b64encode(data.getvalue())
#     return Button(button_text=button_text, button_type=button_type, target=target, tooltip=tooltip,
#                   file_types=file_types, initial_folder=initial_folder, default_extension=default_extension,
#                   disabled=disabled, change_submits=change_submits, enable_events=enable_events,
#                   image_data=btn_img, image_size=image_size,
#                   image_subsample=image_subsample, border_width=border_width, size=size,
#                   auto_size_button=auto_size_button, button_color=(button_color[0], theme_background_color()),
#                   disabled_button_color=disabled_button_color, highlight_colors=highlight_colors,
#                   mouseover_colors=mouseover_colors, use_ttk_buttons=use_ttk_buttons, font=font,
#                   bind_return_key=bind_return_key, focus=focus, pad=pad, key=key, right_click_menu=right_click_menu,
#                   expand_x=expand_x, expand_y=expand_y, visible=visible, metadata=metadata)
#
#
# True_image = button_image_generator(button_text='True')
# False_image = button_image_generator(button_text='False')


# window[toggle_key].update(value=True if window[event].metadata.state else False)
# PySimpleGUI.Button(image_data=True_image if value
# True else False_image, k = f'-TOGGLE-#{key}', border_width = 0,


def helper(l: list):
    if len(l) >=1:
        return 'values=lookup_values, '

def element_picker(key, value, lookup: dict = None) -> [[PySimpleGUI.Element]]:
    font = 'Courier 22 '
    bold = font + ' bold'
    if key in lookup.keys():
        log(f'found lookup')
        lookup_values = [v for v in lookup[key]]
    else:
        log(f'did not find {key} in {lookup.keys().__str__()}')
        lookup_values = None
    if isinstance(value, bool):
        """ returns a row with item name and a toggle button """
        return [[
            PySimpleGUI.Text(text=key, auto_size_text=True, font=bold), PySimpleGUI.Push(),
            PySimpleGUI.Combo(default_value=str(value), values=[True, False], auto_size_text=True, font=font),

        ]]
        # [PySimpleGUI.Button(k=f'-TOGGLE--#{key}', border_width=0,
        #                     # button_color=(
        #                     # PySimpleGUI.theme_background_color(), PySimpleGUI.theme_background_color()),
        #                     # disabled_button_color=(
        #                     # PySimpleGUI.theme_background_color(), PySimpleGUI.theme_background_color()),
        #                     metadata=BtnInfo(state=value))
        #  ],
        # [RoundedButton(button_text=str(value), key=f'-TOGGLE-#{key}', metadata=BtnInfo(state=value))],
        # ]
        # if isinstance(value, list):
        #     pass
        # elif isinstance(value, dict):
        #     pass
    elif isinstance(value, str):
        if isinstance(lookup_values, list):
            return [[
                PySimpleGUI.Text(key, font=bold), PySimpleGUI.Push(),
                PySimpleGUI.Combo(default_value=str(value), values=lookup_values, auto_size_text=True, font=font, key=f'-COMBO-#{key}'), ]]
        else:
            return [[
                PySimpleGUI.Text(key, font=bold), PySimpleGUI.Push(),
                PySimpleGUI.InputText(default_text=str(value), expand_x=True, expand_y=True, justification='center', font=font,
                                  size=element_size(value, 2), enable_events=True, key=f'-InputText-#{key}'), ]]
    elif isinstance(value, int):
        return [[
            PySimpleGUI.Text(key, font=bold),
            PySimpleGUI.Push(),
            PySimpleGUI.InputText(default_text=value, expand_x=True, expand_y=True, justification='center', font=font,
                                  size=element_size(value, 2), enable_events=True, change_submits=True, key=f'-AUTO_SIZE-{key}')]]

    else:
        print(f'Invalid {key}  {value}')
        return [[PySimpleGUI.Text(key), PySimpleGUI.Push(),
                 PySimpleGUI.Text(key + '  ' + str(value), expand_x=False, justification='center', expand_y=False,
                                  size=element_size(value))]]


def edit_item_window(title: str, a_dict: dict, auto_close: int = None, lookup: dict = {}) -> (bool, dict):
    # log(f'edit_item_window {title} {a_dict} {auto_close}')
    # right_click_menu_def = [[], ['Add', 'Edit ', 'Clone', 'Delete']]
    PySimpleGUI.theme('bluePurple')
    layout = []
    for key, item in a_dict.items():
        # log(f'edit_item {key} {item}')
        if isinstance(item, dict):
            log(f'child {item.keys()}')
            for k, v in item.items():
                layout += element_picker(k, v, lookup=lookup)
        else:
            log(f'found {type(item)}')
            # layout += [[PySimpleGUI.Text(key), PySimpleGUI.Push(), PySimpleGUI.InputText(a_dict[key])]]
            layout += element_picker(key, item, lookup=lookup)

    layout += [[PySimpleGUI.B('Ok'), PySimpleGUI.B('Cancel')]]

    # noinspection PyTypeChecker
    window = PySimpleGUI.Window(title=title, layout=layout, keep_on_top=True, auto_close=isinstance(auto_close, int),
                                auto_close_duration=auto_close, auto_size_text=True, auto_size_buttons=True,
                                size=(None, None), resizable=True)
    selected_row = tuple()

    while True:
        event, values = window.read(timeout=100)
        # todo this is for development
        if event not in (PySimpleGUI.TIMEOUT_EVENT, PySimpleGUI.WIN_CLOSED):
            print(f'============ Event = {event} ==============')
            # print(values)

        if event in (None, 'Cancel', PySimpleGUI.WIN_CLOSED):
            break
        elif isinstance(event, int):
            log(f'whoops need to assign a key')
        elif '-BOOL- ' in event:
            log(f'bool {event}, {values}')
            # if len(values['-TABLE-']) > 0:
            #     selected_row = int(values['-TABLE-'][0])
            #     log(f'selected_row= {selected_row}')
            # else:
            #     selected_row = None
        elif 'Ok' in event:
            log(f'Ok Pressed better save {a_dict} ')
            # if len(values['-TABLE-']) > 0:
            #     selected_row = int(values['-TABLE-'][0])
            #     log(f'selected_row= {selected_row}')
            # else:
            #     selected_row = None

            # window['-TABLE-'].update(values=data)
            # elif '-TOGGLE-' in event:
            #     log(f'toggle {event}')
            #     toggle_key = event.split('#')[-1]
            #     log(f'a toggle button has been pressed \n"{toggle_key}" = "{window[event].metadata.state}"')
            #     window[event].metadata.state = not window[event].metadata.state
            #     window[event].update(image_data=True_image if window[event].metadata.state else False_image,
            #                          text=str(window[event].metadata.state),
            #                          button_color=theme_button_color()
            #                          )
            # elif '-AUTO_SIZE-' in event:
            #     log(f'AUTO_SIZE {event}')
            #     target_key = event.split('#')[-1]
            #     log(f'input has changed, resizing "{target_key}" field')
            #     # v = element_size(window[event].get())r
            #     window[event].update(size=element_size(window[event].get()))
            #     #                      text=str(window[event].metadata.state),
            #     #                      button_color=theme_button_color()
            #     #                      )

            window.refresh()
    return False, None

# @decorate
# def edit_table_window(title: str, a_dict: dict, auto_close: int = None) -> (bool, dict):
#     # right_click_menu_def: list = ['Add', 'Edit ', 'Clone', 'Delete'])
#     """
#     Show the channel configuration window
#
#     # :return: True if settings were changed
#     # :rtype: (bool)
#     """
#     data_changed: bool = False
#     if isinstance(a_dict, dict):
#         headers = list(a_dict.keys())
#         data = list(a_dict.values())
#     elif isinstance(a_dict, list):
#         headers = list(a_dict[0].keys())
#         data = [list(i.values()) for i in a_dict]
#     else:
#         log(f'Well this was unexpected a_dict = {type(a_dict)}')
#
#     # right_click_menu = [[]].append(right_click_menu_def)
#     right_click_menu_def = [[], ['Add', 'Edit ', 'Clone', 'Delete']]
#     layout = [
#         [PySimpleGUI.Table(values=data, headings=headers, auto_size_columns=True, display_row_numbers=False,
#                            justification='center', key='-TABLE-', selected_row_colors='red on yellow',
#                            enable_events=False, expand_x=True, expand_y=True, enable_click_events=True,
#                            right_click_selects=True, right_click_menu=right_click_menu_def)],
#         [PySimpleGUI.B('Ok'), PySimpleGUI.B('Cancel')],
#     ]
#
#     window = PySimpleGUI.Window(title=title, layout=layout, keep_on_top=True, auto_close=isinstance(auto_close, int),
#                                 auto_close_duration=auto_close)
#     selected_row = tuple()
#
#     while True:
#         event, values = window.read(timeout=1000)
#
#         # event, [1,2,3] = test_events.pop(0)
#         # todo this is for development
#         if event not in (PySimpleGUI.TIMEOUT_EVENT, PySimpleGUI.WIN_CLOSED, 'Delete'):
#             print(f'============ Event = {event} ==============')
#             # print(values)
#         if event in (None, 'Cancel', PySimpleGUI.WIN_CLOSED):
#             return False, None
#         elif '-TABLE-' and '+CLICKED+' in event:
#             if len(values['-TABLE-']) > 0:
#                 selected_row = int(values['-TABLE-'][0])
#                 log(f'selected_row= {selected_row}')
#             else:
#                 selected_row = None
#         elif 'Delete' in event:
#             del data[selected_row]
#         elif 'Clone' in event:
#             if isinstance(selected_row, int):
#                 data.append(data[selected_row])
#         elif 'Add' in event:
#             data.append(['Add', 'data', 'here'])
#         elif 'Edit' in event:
#             log(f'selected_row={selected_row} {type(selected_row)}')
#
#             if selected_row is None:
#                 log('selected_row is type: None, Ignoring click')
#                 continue
#             elif isinstance(selected_row, int) and selected_row >= 0:
#                 d = pack(header=headers, list_in=data[selected_row])
#
#                 # log(f' d: {d}')
#                 # log('sleeping 2', sleep=1)
#                 changed, di = edit_item_window(title=d['name'], a_dict=d, auto_close=auto_close)
#                 if changed:
#                     data[selected_row] = di.values()
#                     del di
#                     data_changed = True
#                 pass
#             else:
#                 log(f'Uncaught edit event {data[selected_row]} =============================')
#
#         elif event == 'Ok':
#             # sg.user_settings_set_entry('-theme-', values['-THEME-'])
#             return data_changed, pack(title, data)
#         window['-TABLE-'].update(values=data)
#
#         window.refresh()

# # def edit_channel(d: dict) -> (bool, dict):
# #     edit_channel_window_layouts = {
# #         'name': [sg.T('Name'), sg.Push(), sg.Input(default_text=current[0], key='-NAME-', size=10, )],
# #         'center': [sg.T('Center'), sg.Push(),
# #                    sg.Combo(default_value=d, values=[],
# #                             # [f for f in working_config.channels if f.e] , #channels.enabled_frequencies(working_config),
# #                             readonly=False, k='-CENTER-', size=11)],
# #         'channel_type': [sg.T('Channel Type'), sg.Push(),
# #                          sg.Combo(default_value=current[2], values=list(working_config.channel_types),
# #                                   readonly=False, k='-CH_TYPE-', size=11)],
# #         'fpga': [sg.T('FPGA'), sg.Push(), sg.T(key='-FPGA-', size=10, )],
# #     }
# #
# #     layout = [[], ]
# #     headers = [header.capitalize() for header in d.keys()]
# #
# #     for key in headers:
# #         layout += [edit_channel_window_layouts[key.lower()]]
# #
# #     layout += [[sg.B('Ok'), sg.B('Cancel')]]
# #     window = sg.Window('Channel ', layout, keep_on_top=True, auto_close_duration=5, auto_close=True)
# #
# #     return True, d
# #
#
# def channels_window(conf: dict, theme: str = 'bluePurple', test=False) -> (bool, dict):
#     """
#     Show the channel configuration window
#
#     # :return: True if settings were changed
#     # :rtype: (bool)
#     """
#     try:
#         sg.Theme = conf.theme
#     except:
#         sg.Theme = theme
#     selected_cell = None
#
#     val = [list(i.values()) for i in conf['channels']]
#     headers = [header.capitalize() for header in conf['channels'][0].keys()]
#     print(headers)
#     right_click_menu_def = [[], ['Add', 'Edit ', 'Clone', 'Delete']]
#     layout = [
#         # [sg.T('Channel Config', font='DEFAIULT 18')],
#         [sg.Table(values=val, headings=headers,
#                   auto_size_columns=True,
#                   display_row_numbers=False,
#                   justification='center', key='-TABLE-',
#                   selected_row_colors='red on yellow',
#                   enable_events=False,
#                   expand_x=True,
#                   expand_y=True,
#                   enable_click_events=True, right_click_selects=True, right_click_menu=right_click_menu_def)],
#         [sg.B('Ok'), sg.B('Cancel')],
#     ]
#     if test:
#         return True, conf
#
#     window = sg.Window('Channel Config', layout, keep_on_top=True)
#     selected_cell = None
#     while True:
#         event: str
#         event, values = window.read(timeout=100)
#
#         # todo this is for development
#         if event not in (sg.TIMEOUT_EVENT, sg.WIN_CLOSED):
#             print(f'============ Event = {event} ==============')
#
#         # dont save if canceled
#         if event in (None, 'Cancel', sg.WIN_CLOSED):
#             return False, {}
#
#         # table editing
#         elif '-TABLE-' in event:
#             selected_cell = event[2]
#             print(f'You selected row {selected_cell}')
#         elif 'Delete' in event:
#             del conf['channels'][selected_cell[0]]
#             print(f'deleted cell {selected_cell[0]}')
#
#         # elif 'Add' in event:  # todo flesh out add and clone
#         #     channel = channels.ChannelElement('test', 412, 412487500, 'BULK UP')
#         #     config['channels'].append(channel.values())
#         elif 'Clone' in event:
#             if selected_cell is not None:
#                 changed, new_conf = edit_channel_window(conf, selected_cell[0])
#                 if changed:
#                     conf = new_conf
#                     del new_conf
#                 print(f'Cloned Channel {selected_cell[0]}')
#         elif 'Edit' in event:
#             if selected_cell is None:
#                 print('no cell selected')
#                 continue
#             else:
#                 print(f'cell selected {selected_cell[0]}')
#
#                 changed, conf = edit_channel_window(conf, selected_cell[0])
#             if changed:
#                 print('config changed')
#                 config = conf
#                 del conf
#
#         elif event.lower() in ('add'):
#             changed, new_conf = edit_channel_window(conf, None)
#             if changed:
#                 print('config changed')
#                 config = new_conf
#                 del conf
#
#             # print(f'Edited Channel {selected_cell[0]}')
#
#         # save settings
#         elif event == 'Ok':
#             # sg.user_settings_set_entry('-theme-', values['-THEME-'])
#             return True, conf
#         # updated_list = [val for index in config['channels'] val in config['channels'].[i].__dict__.values()]
#         # print(updated_list)
#         window['-TABLE-'].update(values=conf['channels'])
#
#
# # def dict_to_list(d: dict, key: str) -> list:
# #     if key not in d.keys():
# #         return []
# #     else:
# #         return [k[key] for k in d[key]]
#
#
# def edit_channel_window(d: dict, key: int) -> (bool, dict):
#     """
#
#     Show the channel edit window
#
#     """
#
#     working_config = d
#
#     if isinstance(key, int):
#         current = working_config['channels'][key]
#     else:
#         current = ('', 0, 'PRIORITY', 0)
#
#     print(current)
#     edit_channel_window_layouts = {
#         'name': [sg.T('Name'), sg.Push(), sg.Input(default_text=current[0], key='-NAME-', size=10, )],
#         'center': [sg.T('Center'), sg.Push(),
#                    sg.Combo(default_value=current[1], values=[],
#                             # [f for f in working_config.channels if f.e] , #channels.enabled_frequencies(working_config),
#                             readonly=False, k='-CENTER-', size=11)],
#         'channel_type': [sg.T('Channel Type'), sg.Push(),
#                          sg.Combo(default_value=current[2], values=list(working_config.channel_types),
#                                   readonly=False, k='-CH_TYPE-', size=11)],
#         'fpga': [sg.T('FPGA'), sg.Push(), sg.T(key='-FPGA-', size=10, )],
#     }
#
#     layout = [[], ]
#     headers = [header.capitalize() for header in d['channels'][0].keys()]
#
#     for key in headers:
#         layout += [edit_channel_window_layouts[key.lower()]]
#
#     layout += [[sg.B('Ok'), sg.B('Cancel')]]
#     window = sg.Window('Channel ', layout, keep_on_top=True)
#
#     # editing loop
#     while True:
#         event, values = window.read(timeout=100)
#         # keep an animation running so show things are happening
#         if event not in (sg.TIMEOUT_EVENT, sg.WIN_CLOSED):
#             print(f'============ Event = {event} ==============')
#
#         if event in (None, 'Exit', 'Cancel'):
#             window.close()
#             break
#
#         if 'Ok' in event:
#             fields = values['-NAME-'], values['-CENTER-'], values['-CH_TYPE-']
#             # empty_count = [f for f in fields if f == '']
#             if fields.count('') > 0:
#                 sg.popup_ok('Fields can not be empty', background_color='red', keep_on_top=True)
#                 continue
#             elif current[0] == values['-NAME-']:
#                 sg.popup_ok('Unique Names Only', background_color='red', keep_on_top=True)
#                 continue
#             working_config['channels'].append(fields)
#             # print(values['-NAME-'], values['-BASE-'], values['-CENTER-'], values['-CH_TYPE-'])
#             window.close()
#             return True, working_config
#
#     return False, {}
